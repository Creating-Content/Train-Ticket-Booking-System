/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.entities.Train;
import org.example.entities.User;
import org.example.service.UserBookingService;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;

public class App {

    public static void main(String[] args) {
        System.out.println("Running Train Booking System");
        Scanner scanner = new Scanner(System.in);
        UserBookingService userBookingService = null; // Initialize to null

        try {
            userBookingService = new UserBookingService(); // Initialize the service once
        } catch (IOException ex) {
            System.out.println("There is something wrong initializing services: " + ex.getMessage());
            ex.printStackTrace();
            return; // Exit if initial service setup fails
        }

        // The currentUser object will be managed by UserBookingService via setCurrentUser
        // You can get it back using userBookingService.getCurrentUser() if needed for display.
        // For local use within App.java, we can keep a reference here.
        User currentUser = userBookingService.getCurrentUser(); // Will be null initially

        int option = 0;
        do {
            System.out.println("\n--- Main Menu ---");
            System.out.println("1. Sign up");
            System.out.println("2. Login");
            System.out.println("3. Fetch My Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel My Booking");
            System.out.println("7. Exit the App");
            System.out.println("Enter your choice: ");

            try {
                option = scanner.nextInt();
                scanner.nextLine(); // Consume the newline left-over after nextInt()

                switch (option) {
                    case 1: // Sign up
                        System.out.println("Enter a username to sign up: ");
                        String signupUsername = scanner.nextLine();
                        System.out.println("Enter a password to sign up: ");
                        String signupPassword = scanner.nextLine();

                        User newUser = userBookingService.signUp(signupUsername, signupPassword);
                        if (newUser != null) {
                            userBookingService.setCurrentUser(newUser); // Set the current user in the service
                            currentUser = newUser; // Update local reference
                            System.out.println("Signup successful! Welcome, " + currentUser.getName() + ".");
                        } else {
                            System.out.println("Signup failed. User with that name might already exist or an error occurred.");
                        }
                        break;

                    case 2: // Login
                        System.out.println("Enter your username: ");
                        String loginUsername = scanner.nextLine();
                        System.out.println("Enter your password: ");
                        String loginPassword = scanner.nextLine();

                        User loggedInUser = userBookingService.login(loginUsername, loginPassword);
                        if (loggedInUser != null) {
                            userBookingService.setCurrentUser(loggedInUser); // Set the current user in the service
                            currentUser = loggedInUser; // Update local reference
                            System.out.println("Login successful! Welcome back, " + currentUser.getName() + ".");
                        } else {
                            System.out.println("Login failed. Invalid username or password.");
                        }
                        break;

                    case 3: // Fetch Bookings
                        // The service will check if currentUser is set
                        userBookingService.fetchBookings();
                        break;

                    case 4: // Search Trains
                        System.out.println("Type your source station: ");
                        String source = scanner.nextLine();
                        System.out.println("Type your destination station: ");
                        String dest = scanner.nextLine();
                        
                        List<Train> trains = userBookingService.getTrains(source, dest);
                        if (trains.isEmpty()) {
                            System.out.println("No trains found for this route.");
                        } else {
                            System.out.println("Available Trains:");
                            for (int i = 0; i < trains.size(); i++) {
                                Train t = trains.get(i);
                                System.out.println((i + 1) + ". Train ID: " + t.getTrainId() + " (No: " + t.getTrainNo() + ")");
                                System.out.println("   Stations: " + t.getStations());
                                System.out.println("   Available Seats: " + userBookingService.getAvailableSeatsCount(t));
                            }
                        }
                        break;

                    case 5: // Book a Seat
                        currentUser = userBookingService.getCurrentUser(); // Refresh currentUser reference
                        if (currentUser == null) {
                            System.out.println("Please log in or sign up first to book a seat.");
                            break;
                        }

                        System.out.println("Type your source station for booking: ");
                        String bookSource = scanner.nextLine();
                        System.out.println("Type your destination station for booking: ");
                        String bookDest = scanner.nextLine();
                        List<Train> availableTrainsForBooking = userBookingService.getTrains(bookSource, bookDest);

                        if (availableTrainsForBooking.isEmpty()) {
                            System.out.println("No trains available for booking on this route.");
                            break;
                        }

                        System.out.println("Available Trains for Booking:");
                        for (int i = 0; i < availableTrainsForBooking.size(); i++) {
                            Train t = availableTrainsForBooking.get(i);
                            System.out.println((i + 1) + ". Train ID: " + t.getTrainId() + " (No: " + t.getTrainNo() + ")");
                            System.out.println("   Available Seats: " + userBookingService.getAvailableSeatsCount(t));
                        }

                        System.out.println("Select a train by typing its number (1, 2, 3...): ");
                        int trainChoice = scanner.nextInt();
                        scanner.nextLine(); // Consume newline

                        if (trainChoice < 1 || trainChoice > availableTrainsForBooking.size()) {
                            System.out.println("Invalid train selection.");
                            break;
                        }
                        Train trainSelectedForBooking = availableTrainsForBooking.get(trainChoice - 1);

                        System.out.println("Current seat layout (0=available, 1=booked):");
                        List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                        if (seats == null || seats.isEmpty()) {
                            System.out.println("No seat information available for this train.");
                            break;
                        }
                        for (List<Integer> rowList : seats) {
                            for (Integer val : rowList) {
                                System.out.print(val + " ");
                            }
                            System.out.println();
                        }

                        System.out.println("Select the seat by typing the row and column (0-indexed)");
                        System.out.println("Enter the row: ");
                        int row = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        System.out.println("Enter the column: ");
                        int col = scanner.nextInt();
                        scanner.nextLine(); // Consume newline

                        System.out.println("Attempting to book your seat....");
                        Boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, col);
                        if (booked.equals(Boolean.TRUE)) {
                            System.out.println("Booked! Enjoy your journey!");
                        } else {
                            System.out.println("Can't book this seat. It might be invalid or already taken.");
                        }
                        break;

                    case 6: // Cancel my Booking
                        currentUser = userBookingService.getCurrentUser(); // Refresh currentUser reference
                        if (currentUser == null) {
                            System.out.println("Please log in or sign up first to cancel a booking.");
                            break;
                        }
                        System.out.println("Enter the Ticket ID to cancel: ");
                        String ticketIdToCancel = scanner.nextLine();
                        System.out.println("Attempting to cancel your booking...");
                        Boolean canceled = userBookingService.cancelBooking(ticketIdToCancel);
                        if (canceled.equals(Boolean.TRUE)) {
                            System.out.println("Booking canceled successfully!");
                        } else {
                            System.out.println("Failed to cancel booking.");
                        }
                        break;

                    case 7:
                        System.out.println("Exiting application. Goodbye!");
                        break;

                    default:
                        System.out.println("Invalid option. Please choose between 1 and 7.");
                        break;
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number corresponding to the options.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                option = 0; // Reset option to re-display menu
            } catch (Exception e) { // Catch any other unexpected exceptions during menu interaction
                System.out.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
                option = 0; // Reset option to re-display menu or handle exit
            }

        } while (option != 7);

        scanner.close(); // Close the scanner when the application exits
    }
}
